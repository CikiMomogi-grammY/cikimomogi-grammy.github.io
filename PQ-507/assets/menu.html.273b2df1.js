import{_ as r,r as c,o as d,c as k,b as a,a as n,w as t,d as s,e}from"./app.9837a88d.js";const m={},h=n("h1",{id:"interactive-menus-menu",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#interactive-menus-menu","aria-hidden":"true"},"#"),s(" Interactive Menus ("),n("code",null,"menu"),s(")")],-1),b=n("p",null,"Easily create interactive menus.",-1),g=n("h2",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),v=s("An inline keyboard is an array of buttons underneath a message. grammY has a "),y=s("built"),w=n("wbr",null,null,-1),f=s("-in plugin"),_=s(" to create basic inline keyboards."),x=n("p",null,"The menu plugin takes this idea further and lets you create rich menus right inside the chat. They can have interactive buttons, multiple pages with navigation between them, and more.",-1),q=n("p",null,"Here is a simple example that speaks for itself.",-1),T=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Menu "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"@grammyjs/menu"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create a bot."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"token"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create a simple menu."),s(`
`),n("span",{class:"token keyword"},"const"),s(" menu "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Menu"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"my-menu-identifier"'),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"A"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You pressed A!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"row"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"B"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You pressed B!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Make it interactive."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),s("menu"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"start"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Send the menu."),s(`
  `),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Check out this menu:"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" reply_markup"),n("span",{class:"token operator"},":"),s(" menu "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"grammy"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" Menu "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"@grammyjs/menu"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create a bot."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"token"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create a simple menu."),s(`
`),n("span",{class:"token keyword"},"const"),s(" menu "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Menu"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"my-menu-identifier"'),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"A"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You pressed A!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"row"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"B"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You pressed B!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Make it interactive."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),s("menu"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"start"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Send the menu."),s(`
  `),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Check out this menu:"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"reply_markup"),n("span",{class:"token operator"},":"),s(" menu "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Bot "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"https://deno.land/x/grammy@v1.11.1/mod.ts"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Menu "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"https://deno.land/x/grammy_menu@v1.1.2/mod.ts"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create a bot."),s(`
`),n("span",{class:"token keyword"},"const"),s(" bot "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"token"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Create a simple menu."),s(`
`),n("span",{class:"token keyword"},"const"),s(" menu "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Menu"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"my-menu-identifier"'),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"A"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You pressed A!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"row"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"B"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You pressed B!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Make it interactive."),s(`
bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),s("menu"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"command"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"start"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"("),s("ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Send the menu."),s(`
  `),n("span",{class:"token keyword"},"await"),s(" ctx"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reply"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Check out this menu:"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" reply_markup"),n("span",{class:"token operator"},":"),s(" menu "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

bot`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("blockquote",null,[n("p",null,"Make sure that you install all menus before other middleware, especially before middleware that uses callback query data.")],-1),A=s("Naturally, if you are using a "),C=s("custom context type"),B=s(", you can pass it to "),R=n("code",null,"Menu",-1),S=s(" too."),j=e(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu<span class="token operator">&lt;</span>MyContext<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="adding-buttons" tabindex="-1"><a class="header-anchor" href="#adding-buttons" aria-hidden="true">#</a> Adding Buttons</h2>`,2),D=s("The menu plugin lays out your keyboards exactly like the "),N=s("plugin for inline keyboards"),P=s(" does. The class "),O=n("code",null,"Menu",-1),E=s(" replaces the class "),H=n("code",null,[s("Inline"),n("wbr"),s("Keyboard")],-1),W=s("."),L=e(`<p>Here is an example for a menu that has four buttons in a 1-2-1 row shape.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;movements&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;^&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Forward!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Left!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Right!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;v&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Backwards!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use <code>text</code> to add new text buttons. You can pass a label and a handler function.</p><p>Use <code>row</code> to end the current row, and add all subsequent buttons to a new one.</p>`,4),z=s("There are many more button types available, e.g. for opening URLs. Check out "),G={href:"https://doc.deno.land/https://deno.land/x/grammy_menu/mod.ts/~/MenuRange",target:"_blank",rel:"noopener noreferrer"},F=s("this plugin\u2019s API Reference"),U=s(" for "),K=n("code",null,[s("Menu"),n("wbr"),s("Range")],-1),Q=s(", as well as the "),V={href:"https://core.telegram.org/bots/api#inlinekeyboardbutton",target:"_blank",rel:"noopener noreferrer"},$=s("Telegram Bot API Reference"),J=s(" for "),X=n("code",null,[s("Inline"),n("wbr"),s("Keyboard"),n("wbr"),s("Button")],-1),Z=s("."),nn=e(`<h2 id="sending-a-menu" tabindex="-1"><a class="header-anchor" href="#sending-a-menu" aria-hidden="true">#</a> Sending a Menu</h2><p>You must first install a menu. This makes it interactive.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can now simply pass the menu as <code>reply<wbr>_markup</code> when sending a message.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;menu&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Here is your menu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> reply_markup<span class="token operator">:</span> menu <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dynamic-labels" tabindex="-1"><a class="header-anchor" href="#dynamic-labels" aria-hidden="true">#</a> Dynamic Labels</h2><p>Whenever you put a label string on a button, you can also pass a function <code>(ctx:<wbr> Context) <wbr>=<wbr>&gt; string</code> to get a dynamic label on the button. This function may or may not be <code>async</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Create a button with the user&#39;s name, which will greet them when pressed.</span>
<span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;greet-me&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Greet </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>from<span class="token operator">?.</span>first_name <span class="token operator">??</span> <span class="token string">&quot;me&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// dynamic label</span>
    <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>from<span class="token punctuation">.</span>first_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// handler</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A string that is generated by such a function is called a <em>dynamic string</em>. Dynamic strings are ideal for things like toggle buttons.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Set of user identifiers that have notifications enabled.</span>
<span class="token keyword">const</span> notifications <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">toggleNotifications</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>notifications<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> notifications<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;toggle&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>from <span class="token operator">&amp;&amp;</span> notifications<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>from<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;\u{1F514}&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;\u{1F515}&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">toggleNotifications</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>from<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span>menu<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// update the menu!</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that you must update a menu whenever you want your buttons to change. Call <code>ctx<wbr>.menu<wbr>.update()</code> to make sure that your menu will be re-rendered.</p>`,11),sn={class:"custom-container tip"},an=n("p",{class:"custom-container-title"},"Storing Data",-1),tn=n("p",null,[s("The example above demonstrates how to use the menu plugin. It is not a good idea to actually store user settings in a "),n("code",null,"Set"),s(" object, because then all data will be lost when you stop the server.")],-1),en=s("Instead, consider using a database or the "),on=s("session plugin"),pn=s(" if you want to store data."),cn=e(`<h2 id="updating-or-closing-the-menu" tabindex="-1"><a class="header-anchor" href="#updating-or-closing-the-menu" aria-hidden="true">#</a> Updating or Closing the Menu</h2><p>When a button handler is called, a number of useful functions are available on <code>ctx<wbr>.menu</code>.</p><p>If you want your menu to re-render, you can call <code>ctx<wbr>.menu<wbr>.update()</code>. This will only work inside the handlers that you install on your menu. It will not work when called from other bot middleware, as in such cases there is no way to know <em>which</em> menu should be updated.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> onMenuOutdated<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// button label is current time</span>
    <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>menu<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// update time on button click</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>The purpose of <code>on<wbr>Menu<wbr>Outdated</code> is explained <a href="#outdated-menus-and-fingerprints">below</a>. You can ignore it for now.</p></blockquote><p>You can also update the menu implicitly by editing the corresponding message.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>
    <span class="token string">&quot;What&#39;s the time?&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">editMessageText</span><span class="token punctuation">(</span><span class="token string">&quot;It is &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The menu will detect that you intend to edit the text of the message, and use the opportunity to update the buttons underneath too. As a result, you can often avoid having to call <code>ctx<wbr>.menu<wbr>.update()</code> explicitly.</p><p>Calling <code>ctx<wbr>.menu<wbr>.update()</code> does not update the menu immediately. Instead, it sets a flag and remembers to update it at some point during the execution of your middleware. This is called <em>lazy updating</em>. If you edit the message itself later on, the plugin can simply use the same API call to also update the buttons. This is very efficient, and ensures that both the message and the keyboard are updated at the same time.</p><p>Naturally, if you call <code>ctx<wbr>.menu<wbr>.update()</code> but you never request any edits to the message, the menu plugin will update the keyboard by itself, before your middleware completes.</p><p>You can force the menu to update immediately with <code>await ctx<wbr>.menu<wbr>.update({ immediate:<wbr> true })</code>. Note that <code>ctx<wbr>.menu<wbr>.update()</code> will then return a promise, so you need to use <code>await</code>! Using the <code>immediate</code> flag also works for all other operations that you can call on <code>ctx<wbr>.menu</code>. This should only be used when necessary.</p><p>If you want to close a menu, i.e. remove all buttons, you can call <code>ctx<wbr>.menu<wbr>.close()</code>. Again, this will be performed lazily.</p><h2 id="navigation-between-menus" tabindex="-1"><a class="header-anchor" href="#navigation-between-menus" aria-hidden="true">#</a> Navigation Between Menus</h2><p>You can easily create menus with several pages, and navigation between them. Every page has its own instance of <code>Menu</code>. The <code>submenu</code> button is a button that lets you navigate to other pages. Backwards navigation is done via the <code>back</code> button.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;root-menu&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Hi!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">submenu</span><span class="token punctuation">(</span><span class="token string">&quot;Credits&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;credits-menu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> settings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;credits-menu&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Show Credits&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Powered by grammY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token string">&quot;Go Back&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both buttons optionally take middleware handlers so you can react to navigation events.</p><p>Instead of using <code>submenu</code> and <code>back</code> buttons to navigate between pages, you can also do this manually using <code>ctx<wbr>.menu<wbr>.nav()</code>. This function takes the menu identifier string, and will perform navigation lazily. Analogously, backwards navigation works via <code>ctx<wbr>.menu<wbr>.back()</code>.</p><p>Next, you need to link the menus by registering them to one another. Registering a menu to another implies their hierarchy. The menu that is being registered to is the parent, and the registered menu is the child. Below, <code>main</code> is the parent of <code>settings</code>, unless a different parent is explicitly defined. The parent menu is used when backwards navigation is performed.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Register settings menu at main menu.</span>
main<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Optionally, set a different parent.</span>
main<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>settings<span class="token punctuation">,</span> <span class="token string">&quot;back-from-settings-menu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can register as many menus as you like, and nest them as deeply as you like. The menu identifiers let you jump easily to any page.</p><p><strong>You only have to make a single menu of your nested menu structure interactive.</strong> For example, only pass the root menu to <code>bot<wbr>.use</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// If you have this:</span>
main<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Do this:</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Don&#39;t do this:</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>You can create multiple independent menus and make them all interactive.</strong> For example, if you create two unrelated menus and you never need to navigate between them, then you should install both of them independently.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// If you have independent menus like this:</span>
<span class="token keyword">const</span> menuA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;menu-a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> menuB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;menu-b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// You can do this:</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>menuA<span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>menuB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="payloads" tabindex="-1"><a class="header-anchor" href="#payloads" aria-hidden="true">#</a> Payloads</h2><p>You can store short text payloads along with all navigation and text buttons. When the respective handlers are invoked, the text payload will be available under <code>ctx<wbr>.match</code>. This is useful because it lets you store a little bit of data in a menu.</p>`,26),un=s("Payloads cannot be used to actually store any significant amounts of data. The only thing you can store are short strings of typically less than 50 bytes, such as an index or an identifier. If you really want to store user data such as a file identifier, a URL, or anything else, you should use "),ln=s("sessions"),rn=s("."),dn=e(`<p>Here is an example menu that remembers current time in the payload. Other use cases could be, for example, to store the index in a paginated menu.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">generatePayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;store-current-time-in-payload&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&quot;ABORT!&quot;</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> generatePayload <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// Give the user 5 seconds to undo.</span>
      <span class="token keyword">const</span> text <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">Number</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5000</span>
        <span class="token operator">?</span> <span class="token string">&quot;The operation was canceled successfully.&quot;</span>
        <span class="token operator">:</span> <span class="token string">&quot;Too late. Your cat videos have already gone viral on the internet.&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>
bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;publish&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;The videos will be sent. You have 5 seconds to cancel it.&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    reply_markup<span class="token operator">:</span> menu<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Payloads also work well together with dynamic ranges.</p><h2 id="dynamic-ranges" tabindex="-1"><a class="header-anchor" href="#dynamic-ranges" aria-hidden="true">#</a> Dynamic Ranges</h2><p>So far, we\u2019ve only seen how to change the text on a button dynamically. You can also dynamically adjust the structure of a menu in order to add and remove buttons on the fly.</p><div class="custom-container danger"><p class="custom-container-title">Changing a Menu During Message Handling</p><p>You cannot create or change your menus during message handling. All menus must be fully created and registered before your bot starts. This means that you cannot do <code>new Menu(&quot;id&quot;)</code> in a handler of your bot. You cannot call <code>menu<wbr>.text</code> or the like in a handler of your bot.</p><p>Adding new menus while your bot is running would cause a memory leak. Your bot would slow down more and more, and eventually crash.</p><p>However, you can make use of the dynamic ranges described in this section. They allow you to arbitrarily change the structure of an existing menu instance, so they are equally powerful.</p></div><p>You can let a part of a menu\u2019s buttons be generated on the fly (or all of them if you want). We call this part of the menu a <em>dynamic range</em>. In other words, instead of defining the buttons directly on the menu, you can pass a factory function that creates a the buttons when the menu is rendered. The easiest way to create a dynamic range in this function is by using the <code>Menu<wbr>Range</code> class that this plugin provides. A <code>Menu<wbr>Range</code> provides you with exactly the same functions as a menu, but it does not have an identifier, and it cannot be registered.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;dynamic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
menu
  <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">&quot;About&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://grammy.dev/plugins/menu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">dynamic</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Generate a part of the menu dynamically!</span>
    <span class="token keyword">const</span> range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      range
        <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You chose </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> range<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Cancel&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">deleteMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),kn=s("The range builder function that you pass to "),mn=n("code",null,"dynamic",-1),hn=s(" may be "),bn=n("code",null,"async",-1),gn=s(", so you can even read data from an API or a database before returning your new menu range. "),vn=s("In many cases, it makes sense to generate a dynamic range based on "),yn=s("session"),wn=s(" data."),fn=e(`<p>The range builder function takes a context object as the first argument. (This is not specified in the example above.) Optionally, as a second argument after <code>ctx</code>, you can receive a fresh instance of <code>Menu<wbr>Range</code>. You can modify it instead of returning your own instance if that\u2019s what you prefer. Here is how you can use the two parameters of the range builder function.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>menu<span class="token punctuation">.</span><span class="token function">dynamic</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> range<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> text <span class="token keyword">of</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    range <span class="token comment">// no need for \`new MenuRange()\` or a \`return\`</span>
      <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is important that your factory function works in a certain way, otherwise your menus may show strange behavior or even throw errors. As menus are always <a href="#how-does-it-work">rendered twice</a> (once when the menu is sent, and once when a button is pressed), you need to make sure that:</p>`,3),_n=n("strong",null,"You do not have any side-effects in the function that builds the dynamic range.",-1),xn=s(" Do not send messages. Do not write to the session data. Do not change any variables outside of the function. Check out "),qn={href:"https://en.wikipedia.org/wiki/Side_effect_(computer_science)",target:"_blank",rel:"noopener noreferrer"},Tn=s("Wikipedia on side"),Mn=n("wbr",null,null,-1),In=s("-effects"),Yn=s("."),An=n("li",null,[n("strong",null,"Your function is stable"),s(", i.e. it does not depend on randomness, the current time, or other fast-changing data sources. It has to generate the same buttons the first and the second time the menu is rendered. Otherwise, the menu plugin cannot match the correct handler with the pressed button. Instead, it will "),n("a",{href:"#outdated-menus-and-fingerprints"},"detect"),s(" that your menu is outdated, and refuse to call the handlers.")],-1),Cn=e(`<h2 id="answering-callback-queries-manually" tabindex="-1"><a class="header-anchor" href="#answering-callback-queries-manually" aria-hidden="true">#</a> Answering Callback Queries Manually</h2><p>The menu plugin will call <code>answer<wbr>Callback<wbr>Query</code> automatically for its own buttons. You can set <code>auto<wbr>Answer:<wbr> false</code> if you want to disable this.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> autoAnswer<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You will now have to call <code>answer<wbr>Callback<wbr>Query</code> yourself. This allows you to pass custom messages that are displayed to the user.</p><h2 id="outdated-menus-and-fingerprints" tabindex="-1"><a class="header-anchor" href="#outdated-menus-and-fingerprints" aria-hidden="true">#</a> Outdated Menus and Fingerprints</h2><p>Let\u2019s say you have a menu where a user can toggle notifications on and off, such as in the example <a href="#dynamic-labels">up here</a>. Now, if a user sends <code>/settings</code> twice, they will get the same menu twice. But, changing the notification setting on one of the two messages will not update the other!</p><p>It is clear that we cannot keep track of all settings messages in a chat, and update all old menus across the entire chat history. You would have to use so many API calls for this that Telegram would rate-limit your bot. You would also require a lot of storage to remember all of the message identifiers of every menu, across all chats. This is not practical.</p><p>The solution, is to check if a menu is outdated <em>before</em> performing any actions. This way, we will only update old menus if a user actually starts clicking the buttons on them. The menu plugin handles this automatically for you, so you don\u2019t need to worry about it.</p><p>You can configure exactly what happens when an outdated menu is detected. By default, the message \u201CMenu was outdated, try again!\u201D will be displayed to the user, and the menu will be updated. You can define custom behavior in the config under <code>on<wbr>Menu<wbr>Outdated</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Custom message to be displayed</span>
<span class="token keyword">const</span> menu0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> onMenuOutdated<span class="token operator">:</span> <span class="token string">&quot;Updated, try now.&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Custom handler function</span>
<span class="token keyword">const</span> menu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">onMenuOutdated</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">answerCallbackQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Here is a fresh menu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> reply_markup<span class="token operator">:</span> menu1 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Completely disable outdated check (may run wrong button handlers).</span>
<span class="token keyword">const</span> menu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> onMenuOutdated<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have a heuristic to check if the menu is outdated. We consider it outdated if:</p><ul><li>The shape of the menu changed (number of rows, or number of buttons in any row).</li><li>The row/column position of the pressed button is out of range.</li><li>The label on the pressed button changed.</li><li>The pressed button does not contain a handler.</li></ul><p>It is possible that your menu changes, while all of the above things stay the same. It is also possible that your menu does not change fundamentally (i.e. the behavior of the handlers does not change), even though the above heuristic indicates that the menu is outdates. Both scenarios are unlikely to happen for most bots, but if you are creating a menu where this is the case, you should use a fingerprint function.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">ident</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token comment">// Return a string that would change if and only if your menu changes</span>
  <span class="token comment">// so significantly that it should be considered outdated.</span>
  <span class="token keyword">return</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>myStateIdentifier<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token function-variable function">fingerprint</span><span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">ident</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The fingerprint string will replace the above heuristic. This way, you can be sure that outdated menus are always detected.</p><h2 id="how-does-it-work" tabindex="-1"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How Does It Work</h2><p>The menu plugin works completely without storing any data. This is important for large bots with millions of users. Saving the state of all menus would consume too much memory.</p><p>When you create your menu objects and link them together via <code>register</code> calls, no menus are actually built. Instead, the menu plugin will remember how to assemble new menus based on your operations. Whenever a menu is sent, it will replay these operations to render your menu. This includes laying out all dynamic ranges and generating all dynamic labels. Once the menu is sent, the rendered button array will be forgotten again.</p><p>When a menu is sent, every button contains callback query that stores:</p><ul><li>The menu identifier.</li><li>The row/column position of the button.</li><li>An optional payload.</li><li>A fingerprint flag that stores whether or not a fingerprint was used in the menu.</li><li>A 4-byte hash that encodes either the fingerprint, or the menu layout and the button label.</li></ul><p>That way, we can identify exactly which button of which menu was pressed. A menu will only handle button presses if:</p><ul><li>The menu identifiers match.</li><li>The row/column is specified.</li><li>The fingerprint flag exists.</li></ul><p>When a user presses a menu\u2019s button, we need to find the handler that was added to that button at the time the menu was rendered. Hence, we simply render the old menu again. However, this time, we don\u2019t actually need the full layout\u2014all we need is the overall structure, and that one specific button. Consequently, the menu plugin will perform a shallow rendering in order to be more efficient. In other words, the menu will only be rendered partially.</p><p>Once the pressed button is known again (and we have checked that the menu is not <a href="#outdated-menus-and-fingerprints">outdated</a>), we invoke the handler.</p>`,24),Bn=s("Internally, the menu plugin makes heavy use of "),Rn=s("API Transformer Functions"),Sn=s(", for example, to quickly render outgoing menus on the fly."),jn=s("When you register the menus in a large navigation hierarchy, they will in fact not store these references explicitly. Under the hood, all menus of that one structure are added to the same large pool, and that pool is shared across all contained instances. Every menu is responsible for every other one in the index, and they can handle and render each other. (Most often, it is only the root menu that is actually passed to "),Dn=n("code",null,[s("bot"),n("wbr"),s(".use")],-1),Nn=s(" and that receives any updates. In such cases, this one instance will handle the complete pool.) As a result, you are able to navigate between arbitrary menus without limit, all while the update handling can happen in "),Pn={href:"https://en.wikipedia.org/wiki/Time_complexity#Constant_time",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"O(1)",-1),En=s(" time complexity"),Hn=s(" because there is no need to search through entire hierarchies to find the right menu to handle any given button click."),Wn=n("h2",{id:"plugin-summary",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#plugin-summary","aria-hidden":"true"},"#"),s(" Plugin Summary")],-1),Ln=n("li",null,[s("Name: "),n("code",null,"menu")],-1),zn=s("Source: "),Gn={href:"https://github.com/grammyjs/menu",target:"_blank",rel:"noopener noreferrer"},Fn=s("https://"),Un=n("wbr",null,null,-1),Kn=s("github"),Qn=n("wbr",null,null,-1),Vn=s(".com"),$n=n("wbr",null,null,-1),Jn=s("/grammyjs"),Xn=n("wbr",null,null,-1),Zn=s("/menu"),ns=s("Reference: "),ss={href:"https://doc.deno.land/https://deno.land/x/grammy_menu/mod.ts",target:"_blank",rel:"noopener noreferrer"},as=e("https://<wbr>doc<wbr>.deno<wbr>.land<wbr>/https://<wbr>deno<wbr>.land<wbr>/x<wbr>/grammy<wbr>_menu<wbr>/mod<wbr>.ts",23);function ts(es,os){const u=c("AutotagPage"),o=c("RouterLink"),i=c("CodeGroupItem"),l=c("CodeGroup"),p=c("ExternalLinkIcon");return d(),k("div",null,[h,a(u,{config:'[{"url":["/plugins"],"exclude":["console-time","middlewares","autoquote","guide","session","keyboard","/"],"tag":[{"template":"official","text":"OFFICIAL","desc":"This plugin is published and maintained by grammY","locale":{"es":{"text":"OFICIAL","desc":"Este plugin es publicado y mantenido por grammY"},"id":{"text":"RESMI","desc":"Plugin ini dipublikasi dan dikelola oleh grammY"},"zh":{"text":"\u5B98\u65B9\u7EF4\u62A4","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531grammY\u53D1\u5E03\u548C\u7EF4\u62A4\u7684"}}}]},{"url":["/plugins"],"include":["console-time","middlewares","autoquote"],"tag":[{"template":"thirdparty","text":"THIRD-PARTY","desc":"This plugin is maintained by third-party","locale":{"es":{"text":"DE TERCEROS","desc":"Este plugin es mantenido por terceros"},"id":{"text":"PIHAK KETIGA","desc":"Plugin ini dikelola oleh pihak ketiga"},"zh":{"text":"\u7B2C\u4E09\u65B9","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531\u7B2C\u4E09\u65B9\u7EF4\u62A4\u7684"}}}]},{"url":["/hosting"],"exclude":["gcf","comparison"],"tag":[{"template":"deno","desc":"This setup is able to run Deno bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Deno"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Deno"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CDeno\u673A\u5668\u4EBA"}}}]},{"url":["/hosting"],"include":["heroku","vps"],"tag":[{"template":"nodejs","desc":"This setup is able to run Node.js bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Node.js"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Node.js"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CNode.js\u673A\u5668\u4EBA"}}}]}]'}),b,g,n("p",null,[v,a(o,{to:"/plugins/keyboard.html#inline-keyboards"},{default:t(()=>[y,w,f]),_:1}),_]),x,q,a(l,null,{default:t(()=>[a(i,{title:"TypeScript",active:""},{default:t(()=>[T]),_:1}),a(i,{title:"JavaScript"},{default:t(()=>[M]),_:1}),a(i,{title:"Deno"},{default:t(()=>[I]),_:1})]),_:1}),Y,n("p",null,[A,a(o,{to:"/guide/context.html#customizing-the-context-object"},{default:t(()=>[C]),_:1}),B,R,S]),j,n("p",null,[D,a(o,{to:"/plugins/keyboard.html#building-an-inline-keyboard"},{default:t(()=>[N]),_:1}),P,O,E,H,W]),L,n("p",null,[z,n("a",G,[F,a(p)]),U,K,Q,n("a",V,[$,a(p)]),J,X,Z]),nn,n("div",sn,[an,tn,n("p",null,[en,a(o,{to:"/plugins/session.html"},{default:t(()=>[on]),_:1}),pn])]),cn,n("blockquote",null,[n("p",null,[un,a(o,{to:"/plugins/session.html"},{default:t(()=>[ln]),_:1}),rn])]),dn,n("p",null,[kn,mn,hn,bn,gn,n("strong",null,[vn,a(o,{to:"/plugins/session.html"},{default:t(()=>[yn]),_:1}),wn])]),fn,n("ol",null,[n("li",null,[_n,xn,n("a",qn,[Tn,Mn,In,a(p)]),Yn]),An]),Cn,n("p",null,[Bn,a(o,{to:"/advanced/transformers.html"},{default:t(()=>[Rn]),_:1}),Sn]),n("p",null,[jn,Dn,Nn,n("a",Pn,[On,En,a(p)]),Hn]),Wn,n("ul",null,[Ln,n("li",null,[zn,n("a",Gn,[Fn,Un,Kn,Qn,Vn,$n,Jn,Xn,Zn,a(p)])]),n("li",null,[ns,n("a",ss,[as,a(p)])])])])}const cs=r(m,[["render",ts],["__file","menu.html.vue"]]);export{cs as default};
