import{_ as l,a as u,b as r,c as d,d as k,e as h}from"./keyboard-example-3.7d7d06ab.js";import{_ as b,r as p,o as m,c as y,b as a,a as s,w as c,d as n,e as t}from"./app.9837a88d.js";const g={},v=s("h1",{id:"inline-and-custom-keyboards-built-in",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#inline-and-custom-keyboards-built-in","aria-hidden":"true"},"#"),n(" Inline and Custom Keyboards (built-in)")],-1),f=t('<p>Your bot may send a number of buttons, either to be <a href="#inline-keyboards">displayed underneath a message</a>, or to <a href="#custom-keyboards">replace the user\u2019s keyboard</a>. They are called <em>inline keyboards</em> and <em>custom keyboards</em>, respectively. If you think that this is confusing, then that\u2019s because it is. Thank you, Telegram, for this overlapping terminology.</p><p>Let us try to clear it up a bit:</p><table><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td><a href="#inline-keyboards"><strong>Inline Keyboard</strong></a></td><td>a set of buttons that is displayed underneath a message inside the chat.</td></tr><tr><td><a href="#custom-keyboards"><strong>Custom Keyboard</strong></a></td><td>a set of buttons that is displayed instead of the user\u2019s system keyboard.</td></tr><tr><td><strong>Inline Keyboard button</strong></td><td>a button in an inline keyboard, sends a callback query not visible to the user when pressed, sometimes just called <em>inline button</em>.</td></tr><tr><td><strong>Custom Keyboard button</strong></td><td>a button in a keyboard, sends a text message with its label when pressed, sometimes just called <em>keyboard button</em>.</td></tr><tr><td><strong><code>Inline<wbr>Keyboard</code></strong></td><td>class in grammY to create inline keyboards.</td></tr><tr><td><strong><code>Keyboard</code></strong></td><td>class in grammY to create custom keyboards.</td></tr></tbody></table><blockquote><p>Note that both custom keyboard buttons and inline keyboard buttons can also have other functions, such as requesting the user\u2019s location, opening a website, and so on. This was omitted for brevity.</p></blockquote><p>It is not possible to specify both a custom keyboard and an inline keyboard in the same message. The two are mutually exclusive. Moreover, the sent kind of reply markup cannot be changed at a later point by editing the message. For example, it is not possible to first send a custom keyboard along with a message, and then edit the message to use an inline keyboard.</p><h2 id="inline-keyboards" tabindex="-1"><a class="header-anchor" href="#inline-keyboards" aria-hidden="true">#</a> Inline Keyboards</h2>',6),w=n("Revisit the inline keyboard section in the "),x={href:"https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating",target:"_blank",rel:"noopener noreferrer"},_=n("Introduction for Developers"),q=n(" written by the Telegram team."),I=s("p",null,[n("grammY has a simple and intuitive way to build up the inline keyboards that your bot can send along with a message. It provides a class called "),s("code",null,[n("Inline"),s("wbr"),n("Keyboard")]),n(" for this.")],-1),K=n("Both "),T=s("code",null,[n("switch"),s("wbr"),n("Inline")],-1),C=n(" and "),Y=s("code",null,[n("switch"),s("wbr"),n("Inline"),s("wbr"),n("Current")],-1),R=n(" buttons start inline queries. Check out the section about "),E=n("Inline Queries"),A=n(" for more information about how they work."),N=s("h3",{id:"building-an-inline-keyboard",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#building-an-inline-keyboard","aria-hidden":"true"},"#"),n(" Building an Inline Keyboard")],-1),z=s("p",null,[n("Here are three examples how to build an inline keyboard with "),s("code",null,"text"),n(" buttons.")],-1),P=n("You can also use other methods like "),j=s("code",null,"url",-1),S=n(" to let the Telegram clients open a URL, and many more options as listed in the "),B={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/InlineKeyboard#Methods",target:"_blank",rel:"noopener noreferrer"},D=n("grammY API Reference"),M=n(" as well as the "),L={href:"https://core.telegram.org/bots/api#inlinekeyboardbutton",target:"_blank",rel:"noopener noreferrer"},Q=n("Telegram Bot API Reference"),F=n(" for "),O=s("code",null,[n("Inline"),s("wbr"),n("Keyboard")],-1),H=n("."),U=t(`<h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example 1</h4><p>Buttons for a pagination navigation can be built like this:</p><h5 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> inlineKeyboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InlineKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;\xAB 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;first&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;\u2039 3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;prev&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;\xB7 4 \xB7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stay&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;5 \u203A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;next&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;31 \xBB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;last&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> Result</h5><p><img src="`+l+`" alt="Example 1"></p><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example 2</h4><p>An inline keyboard with share button can be built like this:</p><h5 id="code-1" tabindex="-1"><a class="header-anchor" href="#code-1" aria-hidden="true">#</a> Code</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> inlineKeyboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InlineKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Get random music&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;random&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">switchInline</span><span class="token punctuation">(</span><span class="token string">&quot;Send music to friends&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="result-1" tabindex="-1"><a class="header-anchor" href="#result-1" aria-hidden="true">#</a> Result</h5><p><img src="`+u+`" alt="Example 2"></p><h4 id="example-3" tabindex="-1"><a class="header-anchor" href="#example-3" aria-hidden="true">#</a> Example 3</h4><p>URL buttons can be built like this:</p><h5 id="code-2" tabindex="-1"><a class="header-anchor" href="#code-2" aria-hidden="true">#</a> Code</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> inlineKeyboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InlineKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>
  <span class="token string">&quot;Read on TechCrunch&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;https://techcrunch.com/2016/04/11/this-is-the-htc-10/&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="result-2" tabindex="-1"><a class="header-anchor" href="#result-2" aria-hidden="true">#</a> Result</h5><p><img src="`+r+`" alt="Example 3"></p><h3 id="sending-an-inline-keyboard" tabindex="-1"><a class="header-anchor" href="#sending-an-inline-keyboard" aria-hidden="true">#</a> Sending an Inline Keyboard</h3><p>You can send an inline keyboard directly along a message, no matter whether you use <code>bot<wbr>.api<wbr>.send<wbr>Message</code>, <code>ctx<wbr>.api<wbr>.send<wbr>Message</code>, or <code>ctx<wbr>.reply</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Send inline keyboard with message.</span>
<span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  reply_markup<span class="token operator">:</span> inlineKeyboard<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),V=n("Naturally, all other methods that send messages other than text messages support the same options, as specified by the "),G={href:"https://core.telegram.org/bots/api",target:"_blank",rel:"noopener noreferrer"},W=n("Telegram Bot API Reference"),J=t(". For example, you can edit a keyboard by calling <code>edit<wbr>Message<wbr>Reply<wbr>Markup</code>, and passing the new <code>Inline<wbr>Keyboard</code> instance as <code>reply<wbr>_markup</code>. Specify an empty inline keyboard to remove all buttons underneath a message.",7),X=s("h3",{id:"responding-to-clicks",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#responding-to-clicks","aria-hidden":"true"},"#"),n(" Responding to Clicks")],-1),Z={class:"custom-container tip"},$=s("p",{class:"custom-container-title"},"Menu Plugin",-1),nn=n("The keyboard plugin gives you raw access to the update objects that Telegram sends. However, responding to clicks this way can be tedious. If you are looking for a more high-level implementation of inline keyboards, check out the "),sn=n("menu plugin"),an=n(". It makes it simple to create interactive menus."),tn=t(`<p>Every <code>text</code> button has a string as callback data attached. If you don\u2019t attach callback data, grammY will use the button\u2019s text as data.</p><p>Once a user clicks a <code>text</code> button, your bot will receive an update containing the corresponding button\u2019s callback data. You can listen for callback data via <code>bot<wbr>.callback<wbr>Query()</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Construct a keyboard.</span>
<span class="token keyword">const</span> inlineKeyboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InlineKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;click-payload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Send a keyboard along with a message.</span>
bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Curious? Click me!&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> reply_markup<span class="token operator">:</span> inlineKeyboard <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Wait for click events with specific callback data.</span>
bot<span class="token punctuation">.</span><span class="token function">callbackQuery</span><span class="token punctuation">(</span><span class="token string">&quot;click-payload&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">answerCallbackQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    text<span class="token operator">:</span> <span class="token string">&quot;You were curious, indeed!&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Answering All Callback Queries</p><p><code>bot<wbr>.callback<wbr>Query()</code> is useful to listen for click events of specific buttons. You can use <code>bot<wbr>.on(&quot;callback<wbr>_query:<wbr>data&quot;)</code> to listen for events of any button.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">callbackQuery</span><span class="token punctuation">(</span><span class="token string">&quot;click-payload&quot;</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;callback_query:data&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown button event with payload&quot;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>callbackQuery<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">answerCallbackQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// remove loading animation</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It makes sense to define <code>bot<wbr>.on(&quot;callback<wbr>_query:<wbr>data&quot;)</code> at last to always answer all other callback queries that your previous listeners did not handle. Otherwise, some clients may display a loading animation for up to a minute when a user presses a button that your bot does not want to react to.</p></div><h2 id="custom-keyboards" tabindex="-1"><a class="header-anchor" href="#custom-keyboards" aria-hidden="true">#</a> Custom Keyboards</h2><p>First things first: custom keyboards are sometimes just called keyboards, sometimes they\u2019re called reply keyboards, and even Telegram\u2019s own documentation is not consistent in this respect. As a simple rule of thumb, when it isn\u2019t absolutely obvious from the context and not called inline keyboard, it probably is a custom keyboard. This refers to a way to replace the system keyboard by a set of buttons that you can define.</p>`,6),en=n("Revisit the custom keyboard section in the "),on={href:"https://core.telegram.org/bots#keyboards",target:"_blank",rel:"noopener noreferrer"},pn=n("Introduction for Developers"),cn=n(" written by the Telegram team."),ln=t(`<p>grammY has a simple and intuitive way to build up the custom keyboards that your bot can use to replace the system keyboard. It provides a class called <code>Keyboard</code> for this.</p><p>Once a user clicks a <code>text</code> button, your bot will receive the sent text as a plain text message. Remember that you can listen for text message via <code>bot<wbr>.on(&quot;message:<wbr>text&quot;)</code> or <code>bot<wbr>.hears()</code>.</p><h3 id="building-a-custom-keyboard" tabindex="-1"><a class="header-anchor" href="#building-a-custom-keyboard" aria-hidden="true">#</a> Building a Custom Keyboard</h3><p>Here are three examples how to build a custom keyboard with <code>text</code> buttons.</p><p>You can also request the phone number with <code>request<wbr>Contact</code>, the location with <code>request<wbr>Location</code>, and a poll with <code>request<wbr>Poll</code>.</p><h4 id="example-1-1" tabindex="-1"><a class="header-anchor" href="#example-1-1" aria-hidden="true">#</a> Example 1</h4><p>Three buttons in one column can be built like this:</p><h5 id="code-3" tabindex="-1"><a class="header-anchor" href="#code-3" aria-hidden="true">#</a> Code</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> keyboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Yes, they certainly are&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m not quite sure&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;No. \u{1F608}&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">resized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="result-3" tabindex="-1"><a class="header-anchor" href="#result-3" aria-hidden="true">#</a> Result</h5><p><img src="`+d+`" alt="Example 1"></p><h4 id="example-2-1" tabindex="-1"><a class="header-anchor" href="#example-2-1" aria-hidden="true">#</a> Example 2</h4><p>A calculator pad can be built like this:</p><h5 id="code-4" tabindex="-1"><a class="header-anchor" href="#code-4" aria-hidden="true">#</a> Code</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> keyboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="result-4" tabindex="-1"><a class="header-anchor" href="#result-4" aria-hidden="true">#</a> Result</h5><p><img src="`+k+`" alt="Example 2"></p><h4 id="example-3-1" tabindex="-1"><a class="header-anchor" href="#example-3-1" aria-hidden="true">#</a> Example 3</h4><p>Four buttons in a grid can be built like this:</p><h5 id="code-5" tabindex="-1"><a class="header-anchor" href="#code-5" aria-hidden="true">#</a> Code</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> keyboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="result-5" tabindex="-1"><a class="header-anchor" href="#result-5" aria-hidden="true">#</a> Result</h5><p><img src="`+h+`" alt="Example 3"></p><h3 id="sending-a-custom-keyboard" tabindex="-1"><a class="header-anchor" href="#sending-a-custom-keyboard" aria-hidden="true">#</a> Sending a Custom Keyboard</h3><p>You can send a custom keyboard directly along a message, no matter whether you use <code>bot<wbr>.api<wbr>.send<wbr>Message</code>, <code>ctx<wbr>.api<wbr>.send<wbr>Message</code>, or <code>ctx<wbr>.reply</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Send keyboard with message.</span>
<span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  reply_markup<span class="token operator">:</span> keyboard<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),un=n("Naturally, all other methods that send messages other than text messages support the same options, as specified by the "),rn={href:"https://core.telegram.org/bots/api",target:"_blank",rel:"noopener noreferrer"},dn=n("Telegram Bot API Reference"),kn=n("."),hn=t(`<p>You can also give your keyboard one or more further properties by calling special methods on it. They will not add any buttons, but rather define the behavior of the keyboard.</p><h4 id="resize-custom-keyboard" tabindex="-1"><a class="header-anchor" href="#resize-custom-keyboard" aria-hidden="true">#</a> Resize Custom Keyboard</h4><p>You can call <code>resized</code> if you want the custom keyboard to be resized according to the buttons it contains. This will effectively make the keyboard smaller. (Usually, the keyboard will always have the size of the app\u2019s standard keyboard.)</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">resized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It does not matter whether you call <code>resized</code> first, last or somewhere in between. The result will always be the same.</p><h4 id="one-time-custom-keyboards" tabindex="-1"><a class="header-anchor" href="#one-time-custom-keyboards" aria-hidden="true">#</a> One-Time Custom Keyboards</h4><p>You can call <code>one<wbr>Time</code> if you want the custom keyboard to be hidden immediately after the first button was pressed.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">oneTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It does not matter whether you call <code>one<wbr>Time</code> first, last or somewhere in between. The result will always be the same.</p><h4 id="input-field-placeholder" tabindex="-1"><a class="header-anchor" href="#input-field-placeholder" aria-hidden="true">#</a> Input Field Placeholder</h4><p>You can call <code>placeholder</code> if you want a placeholder to be shown in the input field as long as the custom keyboard is visible.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">placeholder</span><span class="token punctuation">(</span><span class="token string">&quot;Decide now!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It does not matter whether you call <code>placeholder</code> first, last or somewhere in between. The result will always be the same.</p><h4 id="selectively-send-custom-keyboards" tabindex="-1"><a class="header-anchor" href="#selectively-send-custom-keyboards" aria-hidden="true">#</a> Selectively Send Custom Keyboards</h4>`,14),bn=n("You can call "),mn=s("code",null,"selected",-1),yn=n(" if you want to show the custom keyboard only to those users that are @-mentioned in the text of the message object, and to the sender of the original message in case your message is a "),gn=n("reply"),vn=n("."),fn=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">selected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It does not matter whether you call <code>selected</code> first, last or somewhere in between. The result will always be the same.</p><h3 id="responding-to-clicks-1" tabindex="-1"><a class="header-anchor" href="#responding-to-clicks-1" aria-hidden="true">#</a> Responding to Clicks</h3><p>As mentioned earlier, all that custom keyboards do is sending regular text messages. Your bot cannot differentiate between ordinary text messages, and text messages that were sent by clicking a button.</p><p>Moreover, buttons will always send exactly the message that\u2019s written on them. Telegram does not allow you to create buttons that display one text, but send another. If you need to do this, you should use an <a href="#inline-keyboards">inline keyboard</a> instead.</p><p>In order to handle the click of a specific button, you can use <code>bot<wbr>.hears</code> with the same text as you put on the button. If you want to handle all button clicks at once, you use <code>bot<wbr>.on(&quot;message:<wbr>text&quot;)</code> and inspect <code>ctx<wbr>.msg<wbr>.text</code> to figure out which button was clicked, or if an ordinary text message was sent.</p><h3 id="removing-a-custom-keyboard" tabindex="-1"><a class="header-anchor" href="#removing-a-custom-keyboard" aria-hidden="true">#</a> Removing a Custom Keyboard</h3><p>Unless you specify <code>one<wbr>_time<wbr>_keyboard</code> as described <a href="#one-time-custom-keyboards">above</a>, the custom keyboard will remain open for the user (but the user can minimize it).</p><p>You can only remove a custom keyboard when you send a new message in the chat, just like you can only specify a new keyboard by sending a message. Pass <code>{ remove<wbr>_keyboard:<wbr> true }</code> as <code>reply<wbr>_markup</code> like so:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  reply_markup<span class="token operator">:</span> <span class="token punctuation">{</span> remove_keyboard<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next to <code>remove<wbr>_keyboard</code>, you can set <code>selective:<wbr> true</code> in order to remove the custom keyboard for selected users only. This works analogously to <a href="#selectively-send-custom-keyboards">selectively sending a custom keyboard</a>.</p><h2 id="plugin-summary" tabindex="-1"><a class="header-anchor" href="#plugin-summary" aria-hidden="true">#</a> Plugin Summary</h2><p>This plugin is built-in into the core of grammY. You don\u2019t need to install anything to use it. Simply import everything from grammY itself.</p><p>Also, both the documentation and the API reference of this plugin are unified with the core package.</p>`,14);function wn(xn,_n){const i=p("AutotagPage"),e=p("ExternalLinkIcon"),o=p("RouterLink");return m(),y("div",null,[v,a(i,{config:'[{"url":["/plugins"],"exclude":["console-time","middlewares","autoquote","guide","session","keyboard","/"],"tag":[{"template":"official","text":"OFFICIAL","desc":"This plugin is published and maintained by grammY","locale":{"es":{"text":"OFICIAL","desc":"Este plugin es publicado y mantenido por grammY"},"id":{"text":"RESMI","desc":"Plugin ini dipublikasi dan dikelola oleh grammY"},"zh":{"text":"\u5B98\u65B9\u7EF4\u62A4","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531grammY\u53D1\u5E03\u548C\u7EF4\u62A4\u7684"}}}]},{"url":["/plugins"],"include":["console-time","middlewares","autoquote"],"tag":[{"template":"thirdparty","text":"THIRD-PARTY","desc":"This plugin is maintained by third-party","locale":{"es":{"text":"DE TERCEROS","desc":"Este plugin es mantenido por terceros"},"id":{"text":"PIHAK KETIGA","desc":"Plugin ini dikelola oleh pihak ketiga"},"zh":{"text":"\u7B2C\u4E09\u65B9","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531\u7B2C\u4E09\u65B9\u7EF4\u62A4\u7684"}}}]},{"url":["/hosting"],"exclude":["gcf","comparison"],"tag":[{"template":"deno","desc":"This setup is able to run Deno bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Deno"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Deno"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CDeno\u673A\u5668\u4EBA"}}}]},{"url":["/hosting"],"include":["heroku","vps"],"tag":[{"template":"nodejs","desc":"This setup is able to run Node.js bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Node.js"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Node.js"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CNode.js\u673A\u5668\u4EBA"}}}]}]'}),f,s("blockquote",null,[s("p",null,[w,s("a",x,[_,a(e)]),q])]),I,s("blockquote",null,[s("p",null,[K,T,C,Y,R,a(o,{to:"/guide/inline-queries.html"},{default:c(()=>[E]),_:1}),A])]),N,z,s("p",null,[P,j,S,s("a",B,[D,a(e)]),M,s("a",L,[Q,a(e)]),F,O,H]),U,s("p",null,[V,s("a",G,[W,a(e)]),J]),X,s("div",Z,[$,s("p",null,[nn,a(o,{to:"/plugins/menu.html"},{default:c(()=>[sn]),_:1}),an])]),tn,s("blockquote",null,[s("p",null,[en,s("a",on,[pn,a(e)]),cn])]),ln,s("p",null,[un,s("a",rn,[dn,a(e)]),kn]),hn,s("p",null,[bn,mn,yn,a(o,{to:"/guide/basics.html#sending-messages-with-reply"},{default:c(()=>[gn]),_:1}),vn]),fn])}const Kn=b(g,[["render",wn],["__file","keyboard.html.vue"]]);export{Kn as default};
