import{_ as l,r as c,o as r,c as u,b as e,a as n,w as i,d as s,e as t}from"./app.9837a88d.js";const d={},h=n("h1",{id:"sending-and-receiving-messages",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sending-and-receiving-messages","aria-hidden":"true"},"#"),s(" Sending and Receiving Messages")],-1),m=t(`<p>As soon as you start your bot with <code>bot<wbr>.start()</code>, grammY will supply your listeners with the messages that users send to your bot. grammY also provides methods to easily reply to these messages.</p><h2 id="receiving-messages" tabindex="-1"><a class="header-anchor" href="#receiving-messages" aria-hidden="true">#</a> Receiving Messages</h2><p>The easiest way to listen for messages is via</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> message <span class="token operator">=</span> ctx<span class="token punctuation">.</span>message<span class="token punctuation">;</span> <span class="token comment">// the message object</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, there are a number of other options, too.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Handles commands, such as /start.</span>
bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Matches the message text against a string or a regular expression.</span>
bot<span class="token punctuation">.</span><span class="token function">hears</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">echo *(.+)?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_=s("You can use auto-complete in your code editor to see all available options, or check out "),k={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Composer",target:"_blank",rel:"noopener noreferrer"},g=s("all methods"),b=s(" of the "),v=n("code",null,"Composer",-1),y=s(" class."),f=s("Read more"),w=s(" about filtering for specific message types with "),x=n("code",null,[s("bot"),n("wbr"),s(".on()")],-1),q=s("."),T=n("h2",{id:"sending-messages",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sending-messages","aria-hidden":"true"},"#"),s(" Sending Messages")],-1),M=s("All methods that bots can use ("),A={href:"https://core.telegram.org/bots/api#available-methods",target:"_blank",rel:"noopener noreferrer"},j=s("important list"),H=s(") are available on the "),I=n("code",null,[s("bot"),n("wbr"),s(".api")],-1),R=s(" object."),Y=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Send a text message to user 12345.</span>
<span class="token keyword">await</span> bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">,</span> <span class="token string">&quot;Hi!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Optionally, you can pass an options object.</span>
<span class="token keyword">await</span> bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">,</span> <span class="token string">&quot;Hi!&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token comment">/* more options */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get information about the bot itself.</span>
<span class="token keyword">const</span> me <span class="token operator">=</span> <span class="token keyword">await</span> bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">getMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// etc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),E=s("Every method takes an optional options object of type "),L=n("code",null,"Other",-1),S=s(", which allows you to set further options for your API calls. These options objects correspond exactly with the options that you can find in list of methods linked above. You can also use auto-complete in your code editor to see all available options, or check out "),N={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Api",target:"_blank",rel:"noopener noreferrer"},C=s("all methods"),P=s(" of the "),z=n("code",null,"Api",-1),F=s(" class. The rest of this page shows some examples for this."),D=s("Also, check out the "),O=s("next section"),V=s(" to learn how the context object of a listener makes sending messages a breeze!"),W=t(`<h2 id="sending-messages-with-reply" tabindex="-1"><a class="header-anchor" href="#sending-messages-with-reply" aria-hidden="true">#</a> Sending Messages With Reply</h2><p>You can use the Telegram reply-to feature by specifying the message identifier to reply to using <code>reply<wbr>_to<wbr>_message<wbr>_id</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">hears</span><span class="token punctuation">(</span><span class="token string">&quot;ping&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \`reply\` is an alias for \`sendMessage\` in the same chat (see next section).</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;pong&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// \`reply_to_message_id\` specifies the actual reply feature.</span>
    reply_to_message_id<span class="token operator">:</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">.</span>message_id<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),B=t("Note that only sending a message via <code>ctx<wbr>.reply</code> does <strong>NOT</strong> mean you are automatically replying to anything. Instead, you should specify <code>reply<wbr>_to<wbr>_message<wbr>_id</code> for this. The function <code>ctx<wbr>.reply</code> is just an alias for <code>ctx<wbr>.api<wbr>.send<wbr>Message</code>, see the ",11),K=s("next section"),G=s("."),U=n("h2",{id:"sending-message-with-formatting",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sending-message-with-formatting","aria-hidden":"true"},"#"),s(" Sending Message With Formatting")],-1),J=s("Check out the "),Q={href:"https://core.telegram.org/bots/api#formatting-options",target:"_blank",rel:"noopener noreferrer"},X=s("section about formatting options"),Z=s(" in the Telegram Bot API Reference written by the Telegram team."),$=s("You can send messages with "),ss=n("strong",null,"bold",-1),ns=s(" or "),es=n("em",null,"italic",-1),as=s(" text, use URLs, and more. There are two ways to do this, as described in the "),ts={href:"https://core.telegram.org/bots/api#formatting-options",target:"_blank",rel:"noopener noreferrer"},os=s("section about formatting options"),is=s(", namely Markdown and HTML."),cs=n("h3",{id:"markdown",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#markdown","aria-hidden":"true"},"#"),s(" Markdown")],-1),ps=s("Also see "),ls={href:"https://core.telegram.org/bots/api#markdownv2-style",target:"_blank",rel:"noopener noreferrer"},rs=s("https://"),us=n("wbr",null,null,-1),ds=s("core"),hs=n("wbr",null,null,-1),ms=s(".telegram"),_s=n("wbr",null,null,-1),ks=s(".org"),gs=n("wbr",null,null,-1),bs=s("/bots"),vs=n("wbr",null,null,-1),ys=s("/api"),fs=n("wbr",null,null,-1),ws=s("#markdownv2"),xs=n("wbr",null,null,-1),qs=s("-style"),Ts=t(`<p>Send your message with markdown in the text, and specify <code>parse<wbr>_mode:<wbr> &quot;MarkdownV2&quot;</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">await</span> bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>
  <span class="token number">12345</span><span class="token punctuation">,</span>
  <span class="token string">&quot;*Hi\\\\!* _Welcome_ to [grammY](https://grammy.dev)\\\\.&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> parse_mode<span class="token operator">:</span> <span class="token string">&quot;MarkdownV2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h3>`,3),Ms=s("Also see "),As={href:"https://core.telegram.org/bots/api#html-style",target:"_blank",rel:"noopener noreferrer"},js=s("https://"),Hs=n("wbr",null,null,-1),Is=s("core"),Rs=n("wbr",null,null,-1),Ys=s(".telegram"),Es=n("wbr",null,null,-1),Ls=s(".org"),Ss=n("wbr",null,null,-1),Ns=s("/bots"),Cs=n("wbr",null,null,-1),Ps=s("/api"),zs=n("wbr",null,null,-1),Fs=s("#html"),Ds=n("wbr",null,null,-1),Os=s("-style"),Vs=t(`<p>Send your message with HTML elements in the text, and specify <code>parse<wbr>_mode:<wbr> &quot;HTML&quot;</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">await</span> bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>
  <span class="token number">12345</span><span class="token punctuation">,</span>
  <span class="token string">&#39;&lt;b&gt;Hi!&lt;/b&gt; &lt;i&gt;Welcome&lt;/i&gt; to &lt;a href=&quot;https://grammy.dev&quot;&gt;grammY&lt;/a&gt;.&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> parse_mode<span class="token operator">:</span> <span class="token string">&quot;HTML&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sending-files" tabindex="-1"><a class="header-anchor" href="#sending-files" aria-hidden="true">#</a> Sending Files</h2>`,3),Ws=s("File handling is explained in greater depth in a "),Bs=s("later section"),Ks=s("."),Gs=n("h2",{id:"force-reply",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#force-reply","aria-hidden":"true"},"#"),s(" Force Reply")],-1),Us=s("This can be useful if your bot is running in "),Js={href:"https://core.telegram.org/bots#privacy-mode",target:"_blank",rel:"noopener noreferrer"},Qs=s("privacy mode"),Xs=s(" in group chats."),Zs=s("When you send a message, you can make the user\u2019s Telegram client automatically specify the message as reply. That means that the user will reply to your bot\u2019s message automatically (unless they remove the reply manually). As a result, your bot will receive the user\u2019s message even when running in "),$s={href:"https://core.telegram.org/bots#privacy-mode",target:"_blank",rel:"noopener noreferrer"},sn=s("privacy mode"),nn=s(" in group chats."),en=t(`<p>You can force a reply like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&quot;Hi! I can only read messages that explicitly reply to me!&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// Make Telegram clients automatically show a reply interface to the user.</span>
    reply_markup<span class="token operator">:</span> <span class="token punctuation">{</span> force_reply<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function an(tn,on){const p=c("AutotagPage"),a=c("ExternalLinkIcon"),o=c("RouterLink");return r(),u("div",null,[h,e(p,{config:'[{"url":["/plugins"],"exclude":["console-time","middlewares","autoquote","guide","session","keyboard","/"],"tag":[{"template":"official","text":"OFFICIAL","desc":"This plugin is published and maintained by grammY","locale":{"es":{"text":"OFICIAL","desc":"Este plugin es publicado y mantenido por grammY"},"id":{"text":"RESMI","desc":"Plugin ini dipublikasi dan dikelola oleh grammY"},"zh":{"text":"\u5B98\u65B9\u7EF4\u62A4","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531grammY\u53D1\u5E03\u548C\u7EF4\u62A4\u7684"}}}]},{"url":["/plugins"],"include":["console-time","middlewares","autoquote"],"tag":[{"template":"thirdparty","text":"THIRD-PARTY","desc":"This plugin is maintained by third-party","locale":{"es":{"text":"DE TERCEROS","desc":"Este plugin es mantenido por terceros"},"id":{"text":"PIHAK KETIGA","desc":"Plugin ini dikelola oleh pihak ketiga"},"zh":{"text":"\u7B2C\u4E09\u65B9","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531\u7B2C\u4E09\u65B9\u7EF4\u62A4\u7684"}}}]},{"url":["/hosting"],"exclude":["gcf","comparison"],"tag":[{"template":"deno","desc":"This setup is able to run Deno bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Deno"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Deno"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CDeno\u673A\u5668\u4EBA"}}}]},{"url":["/hosting"],"include":["heroku","vps"],"tag":[{"template":"nodejs","desc":"This setup is able to run Node.js bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Node.js"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Node.js"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CNode.js\u673A\u5668\u4EBA"}}}]}]'}),m,n("p",null,[_,n("a",k,[g,e(a)]),b,v,y]),n("blockquote",null,[n("p",null,[e(o,{to:"/guide/filter-queries.html"},{default:i(()=>[f]),_:1}),w,x,q])]),T,n("p",null,[M,n("strong",null,[n("a",A,[j,e(a)])]),H,I,R]),Y,n("p",null,[E,L,S,n("a",N,[C,e(a)]),P,z,F]),n("p",null,[D,e(o,{to:"/guide/context.html"},{default:i(()=>[O]),_:1}),V]),W,n("blockquote",null,[n("p",null,[B,e(o,{to:"/guide/context.html#available-actions"},{default:i(()=>[K]),_:1}),G])]),U,n("blockquote",null,[n("p",null,[J,n("a",Q,[X,e(a)]),Z])]),n("p",null,[$,ss,ns,es,as,n("a",ts,[os,e(a)]),is]),cs,n("blockquote",null,[n("p",null,[ps,n("a",ls,[rs,us,ds,hs,ms,_s,ks,gs,bs,vs,ys,fs,ws,xs,qs,e(a)])])]),Ts,n("blockquote",null,[n("p",null,[Ms,n("a",As,[js,Hs,Is,Rs,Ys,Es,Ls,Ss,Ns,Cs,Ps,zs,Fs,Ds,Os,e(a)])])]),Vs,n("p",null,[Ws,e(o,{to:"/guide/files.html#sending-files"},{default:i(()=>[Bs]),_:1}),Ks]),Gs,n("blockquote",null,[n("p",null,[Us,n("a",Js,[Qs,e(a)]),Xs])]),n("p",null,[Zs,n("a",$s,[sn,e(a)]),nn]),en])}const pn=l(d,[["render",an],["__file","basics.html.vue"]]);export{pn as default};
