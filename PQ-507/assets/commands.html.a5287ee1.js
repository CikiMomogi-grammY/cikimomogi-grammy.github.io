import{_ as p,r as o,o as r,c as l,b as t,a as n,w as d,d as s,e}from"./app.9a621f1c.js";const u={},m=n("h1",{id:"commands",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#commands","aria-hidden":"true"},"#"),s(" Commands")],-1),h=n("p",null,"Commands are special entities in Telegram messages, that serve as instructions for bots.",-1),b=n("h2",{id:"usage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usage","aria-hidden":"true"},"#"),s(" Usage")],-1),g=s("Revisit the commands section in the "),k={href:"https://core.telegram.org/bots#commands",target:"_blank",rel:"noopener noreferrer"},_=s("Introduction for Developers"),w=s(" written by the Telegram team."),v=e(`<p>grammY provides special handling for commands (e.g. <code>/start</code> and <code>/help</code>). You can directly register listeners for certain commands via <code>bot<wbr>.command()</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Respond to the command /start.</span>
bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Respond to the command /help.</span>
bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;help&quot;</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Respond to the commands /a, /b, /c, and /d.</span>
bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span> <span class="token comment">/* , ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that only those commands that are in the beginning of a message are handled, so if a user sends <code>&quot;Please do not send <wbr>/start to that bot!&quot;</code>, then your listener will not be called, even though the <code>/start</code> command <em>is</em> contained in the message.</p><p>Telegram supports sending targeted commands to bots, i.e. commands that end with <code>@your<wbr>_bot<wbr>_name</code>. grammY handles this automatically for you, so <code>bot<wbr>.command(&quot;start&quot;)</code> will match messages with <code>/start</code> and with <code>/start@your<wbr>_bot<wbr>_name</code> as commands. You can choose to match only targeted commands by specifying <code>bot<wbr>.command(&quot;start@your<wbr>_bot<wbr>_name&quot;)</code>.</p>`,4),y={class:"custom-container tip"},f=e(`<p class="custom-container-title">Suggest Commands to Users</p><p>You can call</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">await</span> bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">setMyCommands</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> command<span class="token operator">:</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&quot;Start the bot&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> command<span class="token operator">:</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&quot;Show help text&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> command<span class="token operator">:</span> <span class="token string">&quot;settings&quot;</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">&quot;Open settings&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>to make Telegram clients display a list of suggested commands in the text input field.</p>`,4),q=s("Alternatively, you can configure this by talking to "),x={href:"https://t.me/BotFather",target:"_blank",rel:"noopener noreferrer"},T=s("@Bot"),R=n("wbr",null,null,-1),I=s("Father"),E=s("."),Y=e(`<h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h2><p>Users can send <strong>arguments</strong> along with their commands. You can access the argument string via <code>ctx<wbr>.match</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \`item\` will be &quot;apple pie&quot; if a user sends &quot;/add apple pie&quot;.</span>
  <span class="token keyword">const</span> item <span class="token operator">=</span> ctx<span class="token punctuation">.</span>match<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that you can always access the entire message\u2019s text via <code>ctx<wbr>.msg<wbr>.text</code>.</p><h2 id="deep-linking-support" tabindex="-1"><a class="header-anchor" href="#deep-linking-support" aria-hidden="true">#</a> Deep Linking Support</h2>`,5),A=s("Revisit the deep linking section in the "),N={href:"https://core.telegram.org/bots#deep-linking",target:"_blank",rel:"noopener noreferrer"},D=s("Introduction for Developers"),j=s(" written by the Telegram team."),C=e("<p>When a user visits <code>https://<wbr>t<wbr>.me<wbr>/your<wbr>_bot<wbr>_name<wbr>?start<wbr>=<wbr>payload</code>, their Telegram client will show a START button that (when clicked) sends the string from the URL parameter along with the message, in this example, the message text will be <code>&quot;<wbr>/start payload&quot;</code>. Telegram clients will not show the payload to the user (they will only see <code>&quot;<wbr>/start&quot;</code> in the UI), however, your bot will receive it. grammY extracts this payload for you, and provides it under <code>ctx<wbr>.match</code>. In our example, <code>ctx<wbr>.match</code> would contain the string <code>&quot;payload&quot;</code>.</p>",1),L=s("Deep linking is useful if you want to build a referral system, or track where users discovered your bot. For example, your bot could send a channel post with an "),S=s("inline keyboard"),P=e(" button. The button contains a URL like the one above, e.g. <code>https://<wbr>t<wbr>.me<wbr>/your<wbr>_bot<wbr>_name<wbr>?start<wbr>=<wbr>awesome<wbr>-channel<wbr>-post<wbr>-12345</code>. When a user clicks on the button underneath the post, their Telegram client will open a chat with your bot, and display the START button as described above. This way, your bot can identify where a user came from, and that they clicked the button underneath a specific channel post.",3),z=n("p",null,"Naturally, you can also embed such links anywhere else: on the web, in messages, in QR codes, etc.",-1);function F(U,B){const c=o("AutotagPage"),a=o("ExternalLinkIcon"),i=o("RouterLink");return r(),l("div",null,[m,t(c,{config:'[{"url":["/plugins"],"exclude":["console-time","middlewares","autoquote","guide","session","keyboard","/"],"tag":[{"template":"official","text":"OFFICIAL","desc":"This plugin is published and maintained by grammY","locale":{"es":{"text":"OFICIAL","desc":"Este plugin es publicado y mantenido por grammY"},"id":{"text":"RESMI","desc":"Plugin ini dipublikasi dan dikelola oleh grammY"},"zh":{"text":"\u5B98\u65B9\u7EF4\u62A4","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531grammY\u53D1\u5E03\u548C\u7EF4\u62A4\u7684"}}}]},{"url":["/plugins"],"include":["console-time","middlewares","autoquote"],"tag":[{"template":"thirdparty","text":"THIRD-PARTY","desc":"This plugin is maintained by third-party","locale":{"es":{"text":"DE TERCEROS","desc":"Este plugin es mantenido por terceros"},"id":{"text":"PIHAK KETIGA","desc":"Plugin ini dikelola oleh pihak ketiga"},"zh":{"text":"\u7B2C\u4E09\u65B9","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531\u7B2C\u4E09\u65B9\u7EF4\u62A4\u7684"}}}]},{"url":["/hosting"],"exclude":["gcf","comparison"],"tag":[{"template":"deno","desc":"This setup is able to run Deno bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Deno"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Deno"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CDeno\u673A\u5668\u4EBA"}}}]},{"url":["/hosting"],"include":["heroku","vps"],"tag":[{"template":"nodejs","desc":"This setup is able to run Node.js bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Node.js"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Node.js"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CNode.js\u673A\u5668\u4EBA"}}}]}]'}),h,b,n("blockquote",null,[n("p",null,[g,n("a",k,[_,t(a)]),w])]),v,n("div",y,[f,n("p",null,[q,n("a",x,[T,R,I,t(a)]),E])]),Y,n("blockquote",null,[n("p",null,[A,n("a",N,[D,t(a)]),j])]),C,n("p",null,[L,t(i,{to:"/plugins/keyboard.html#inline-keyboards"},{default:d(()=>[S]),_:1}),P]),z])}const O=p(u,[["render",F],["__file","commands.html.vue"]]);export{O as default};
