import{_ as u,r as i,o as l,c as r,b as s,a,w as t,d as n,e as o}from"./app.9a621f1c.js";const d={},m=a("h1",{id:"transformer-api-bot",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#transformer-api-bot","aria-hidden":"true"},"#"),n(" Transformer API Bot")],-1),k=a("p",null,"Middleware adalah sebuah function yang menangani sebuah object context, misalnya data yang masuk.",-1),g=a("p",null,[n("grammY juga menyediakan kebalikannya. "),a("em",null,"Function transformer"),n(" adalah sebuah function yang menangani data yang keluar, contohnya:")],-1),b=a("ul",null,[a("li",null,"Pemanggilan method API Bot, serta"),a("li",null,"Object payload yang cocok dengan suatu method tertentu.")],-1),h=n("Alih-alih memasukkan "),v=a("code",null,"next",-1),f=n(" sebagai argument terakhir untuk memanggil middleware hilir (downstream), kamu akan menerima "),_=a("code",null,"prev",-1),y=n(" sebagai argument pertama untuk memanfaatkan function transformer hulu (upstream). Kalau dilihat dari "),x=a("em",null,"type signature",-1),w=n("-nya "),j=a("code",null,"Transformer",-1),P=n(" ("),A={href:"https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Transformer",target:"_blank",rel:"noopener noreferrer"},I=n("referensi API grammY"),F=n("), kita bisa melihat bagaimana ia diimplentasikan. Perlu diketahui bahwa "),q=a("code",null,[n("Payload<M"),a("wbr"),n(", R>")],-1),M=n(" merujuk ke object payload yang akan dicocokkan dengan method yang diberikan, serta "),T=a("code",null,[n("Api"),a("wbr"),n("Response<Api"),a("wbr"),n("Call"),a("wbr"),n("Result<M"),a("wbr"),n(", R>>")],-1),C=n(" adalah type pengembalian dari method yang dipanggil."),B=o(`<p>Function transformer yang terakhir dipanggil adalah pemanggilan bawaan yang melakukan beberapa hal seperti <em>JSON serialization</em> untuk field tertentu dan terkadang juga memanggil <code>fetch</code>.</p><p>Function transformer tidak memiliki sebuah class yang setara dengan <code>Composer</code>. Tetapi, jika kamu membutuhkannya, kamu bisa membuatnya sendiri. Kami siap menerima pull request-mu! \u{1F609}</p><h2 id="memasang-function-transformer" tabindex="-1"><a class="header-anchor" href="#memasang-function-transformer" aria-hidden="true">#</a> Memasang Function Transformer</h2><p>Function Transformer bisa dipasang di <code>bot<wbr>.api</code>. Berikut contoh function transformer yang tidak melakukan apapun:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Meneruskan ke function transformer</span>
bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token function">prev</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Perbandingan jika diteruskan ke middleware</span>
bot<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Berikut contoh function transformer yang mencegah semua pemanggilan API:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Mengembalikan undefined alih-alih type object yang bersangkutan.</span>
bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> method<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">undefined</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Kamu juga bisa memasang function transformer di object API milik object context. Function transformer hanya akan digunakan sementara untuk request API yang dilakukan di object context tersebut, sehingga pemanggilan <code>bot<wbr>.api</code> tidak terpengaruh. Pemanggilan melalui object context dari middleware yang berjalan secara bersamaan (concurrent) juga tidak terpengaruh. Segera setelah middleware yang bersangkutan selesai, function transformer tersebut langsung dibuang.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Pasang di semua object context yang memproses pesan.</span>
  ctx<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">prev</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signal<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Parameter <code>signal</code> harus selalu diteruskan ke <code>prev</code>. Ia diperlukan untuk membatalkan request serta menjaga agar <code>bot<wbr>.stop</code> bekerja dengan baik.</p></blockquote><p>Function transformer yang dipasang di <code>bot<wbr>.api</code> juga akan terpasang di setiap object <code>ctx<wbr>.api</code>. Sehingga, pemanggilan <code>ctx<wbr>.api</code> akan ditransformasikan oleh kedua transformer baik di <code>ctx<wbr>.api</code> maupun di <code>bot<wbr>.api</code>.</p><h2 id="penggunaan-function-transformer" tabindex="-1"><a class="header-anchor" href="#penggunaan-function-transformer" aria-hidden="true">#</a> Penggunaan Function Transformer</h2><p>Function transformer sama fleksibelnya dengan middleware, serta penerapannya pun juga beragam.</p>`,13),E=n("Sebagai contoh, "),S=n("plugin menu grammY"),R=n(" menggunakan sebuah function transformer untuk mengubah output instance menu menjadi payload yang sesuai. Kamu juga bisa bisa menggunakannya untuk:"),Y=n("Mengimplementasikan "),N=n("pengaturan flood"),K=n(","),D=a("li",null,[a("em",null,"Mock"),n(" request API selama pengetesan,")],-1),z=n("Mengatur "),L=n("perilaku retry"),O=n(","),G=a("li",null,"Dan lain-lain.",-1),V=o('<p>Namun, perlu diperhatikan bahwa mengulang kembali (retry) pemanggilan API bisa memiliki efek samping yang aneh, contohnya disaat kamu memanggil <code>send<wbr>Document</code> dan meneruskan instance stream ke <code>Input<wbr>File</code>, maka stream akan dibaca saat pertama kali request dicoba. Jika kamu memanggil <code>prev</code> lagi, stream tersebut mungkin sudah (sebagian) terpakai, sehingga file menjadi rusak. Oleh karena itu, cara yang lebih baik adalah dengan meneruskan path file ke <code>Input<wbr>File</code>, sehingga grammY bisa membuat ulang stream jika diperlukan.</p><h2 id="menggunakan-api-flavor" tabindex="-1"><a class="header-anchor" href="#menggunakan-api-flavor" aria-hidden="true">#</a> Menggunakan API Flavor</h2>',2),H=n("grammY memiliki fitur "),J=n("context flavor"),Q=o(" yang bisa digunakan untuk mengatur type context. Flavor juga bisa digunakan di method API, baik yang secara langsung ada di object context seperti <code>ctx<wbr>.reply</code> maupun semua method di <code>ctx<wbr>.api</code> dan <code>ctx<wbr>.api<wbr>.raw</code>. Tetapi, kamu tidak bisa mengatur type <code>bot<wbr>.api</code> dan <code>bot<wbr>.api<wbr>.raw</code> melalui context flavor.",11),U=o(`<p>Itulah kenapa grammY mendukung <em>API flavor</em>. Ia dapat menyelesaikan permasalahan berikut:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Api<span class="token punctuation">,</span> Bot<span class="token punctuation">,</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;grammy&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SomeApiFlavor<span class="token punctuation">,</span> SomeContextFlavor<span class="token punctuation">,</span> somePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;myPlugin&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Buat Context flavor.</span>
<span class="token keyword">type</span> <span class="token class-name">MyContext</span> <span class="token operator">=</span> Context <span class="token operator">&amp;</span> SomeContextFlavor<span class="token punctuation">;</span>
<span class="token comment">// Buat API flavor.</span>
<span class="token keyword">type</span> <span class="token class-name">MyApi</span> <span class="token operator">=</span> Api <span class="token operator">&amp;</span> SomeApiFlavor<span class="token punctuation">;</span>

<span class="token comment">// Gunakan kedua flavor.</span>
<span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot<span class="token operator">&lt;</span>MyContext<span class="token punctuation">,</span> MyApi<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;my-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Gunakan sebuah plugin.</span>
bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">somePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Sekarang panggil \`bot.api\` dengan type yang sudah disesuaikan dari API flavor.</span>
bot<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">somePluginMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Gunakan juga type yang sudah disesuaikan dari context flavor.</span>
bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ctx<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">somePluginMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),W=n("API flavor berjalan sama persis seperti context flavor. Baik jenis "),X=a("em",null,"additive",-1),Z=n(" maupun "),$=a("em",null,"transformative",-1),nn=n(" juga tersedia, dan berbagai macam API flavor juga bisa dikombinasikan sama halnya dengan yang kamu lakukan dengan context flavor. Kalau kamu belum paham bagaimana cara menggunakannya, baca kembali "),an=n("materi tentang context flavor"),sn=n(".");function en(tn,on){const p=i("AutotagPage"),c=i("ExternalLinkIcon"),e=i("RouterLink");return l(),r("div",null,[m,s(p,{config:'[{"url":["/plugins"],"exclude":["console-time","middlewares","autoquote","guide","session","keyboard","/"],"tag":[{"template":"official","text":"OFFICIAL","desc":"This plugin is published and maintained by grammY","locale":{"es":{"text":"OFICIAL","desc":"Este plugin es publicado y mantenido por grammY"},"id":{"text":"RESMI","desc":"Plugin ini dipublikasi dan dikelola oleh grammY"},"zh":{"text":"\u5B98\u65B9\u7EF4\u62A4","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531grammY\u53D1\u5E03\u548C\u7EF4\u62A4\u7684"}}}]},{"url":["/plugins"],"include":["console-time","middlewares","autoquote"],"tag":[{"template":"thirdparty","text":"THIRD-PARTY","desc":"This plugin is maintained by third-party","locale":{"es":{"text":"DE TERCEROS","desc":"Este plugin es mantenido por terceros"},"id":{"text":"PIHAK KETIGA","desc":"Plugin ini dikelola oleh pihak ketiga"},"zh":{"text":"\u7B2C\u4E09\u65B9","desc":"\u8FD9\u4E2A\u63D2\u4EF6\u662F\u7531\u7B2C\u4E09\u65B9\u7EF4\u62A4\u7684"}}}]},{"url":["/hosting"],"exclude":["gcf","comparison"],"tag":[{"template":"deno","desc":"This setup is able to run Deno bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Deno"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Deno"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CDeno\u673A\u5668\u4EBA"}}}]},{"url":["/hosting"],"include":["heroku","vps"],"tag":[{"template":"nodejs","desc":"This setup is able to run Node.js bots","locale":{"es":{"desc":"Esta configuraci\xF3n es capaz de ejecutar bots Node.js"},"id":{"desc":"Konfigurasi ini dapat dijalankan di bot Node.js"},"zh":{"desc":"\u8FD9\u4E2A\u8BBE\u7F6E\u80FD\u591F\u8FD0\u884CNode.js\u673A\u5668\u4EBA"}}}]}]'}),k,g,b,a("p",null,[h,v,f,_,y,x,w,j,P,a("a",A,[I,s(c)]),F,q,M,T,C]),B,a("p",null,[E,s(e,{to:"/id/plugins/menu.html"},{default:t(()=>[S]),_:1}),R]),a("ul",null,[a("li",null,[Y,s(e,{to:"/id/plugins/transformer-throttler.html"},{default:t(()=>[N]),_:1}),K]),D,a("li",null,[z,s(e,{to:"/id/plugins/auto-retry.html"},{default:t(()=>[L]),_:1}),O]),G]),V,a("p",null,[H,s(e,{to:"/id/guide/context.html#context-flavor"},{default:t(()=>[J]),_:1}),Q]),U,a("p",null,[W,X,Z,$,nn,s(e,{to:"/id/guide/context.html#context-flavor"},{default:t(()=>[an]),_:1}),sn])])}const cn=u(d,[["render",en],["__file","transformers.html.vue"]]);export{cn as default};
